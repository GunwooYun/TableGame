
Dice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080012a  0080012a  00000484  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000110  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000041d  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028c  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000506  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a0  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 32       	cpi	r26, 0x2F	; 47
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  c6:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <GET_ADC>:
 		
}

int GET_ADC(int muxx)
{
	ADMUX = muxx;
  ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(6<<ADPS0); //분주비 128
  d0:	86 ec       	ldi	r24, 0xC6	; 198
  d2:	86 b9       	out	0x06, r24	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	9e e4       	ldi	r25, 0x4E	; 78
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <GET_ADC+0xa>
	_delay_ms(5);
 	while(!(ADCSRA&(1<<ADIF)));
  dc:	34 9b       	sbis	0x06, 4	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <GET_ADC+0xe>
	
	return ADC;
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	35 b1       	in	r19, 0x05	; 5
}
  e4:	c9 01       	movw	r24, r18
  e6:	08 95       	ret

000000e8 <find_index>:

int find_index(int arr[]){
  e8:	fc 01       	movw	r30, r24
	int max_value = arr[1];
  ea:	42 81       	ldd	r20, Z+2	; 0x02
  ec:	53 81       	ldd	r21, Z+3	; 0x03
  ee:	dc 01       	movw	r26, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	12 96       	adiw	r26, 0x02	; 2
  f6:	2d 91       	ld	r18, X+
  f8:	3c 91       	ld	r19, X
  fa:	13 97       	sbiw	r26, 0x03	; 3
  fc:	42 17       	cp	r20, r18
  fe:	53 07       	cpc	r21, r19
 100:	0c f4       	brge	.+2      	; 0x104 <find_index+0x1c>
 102:	a9 01       	movw	r20, r18

	for(int index=1; index <7; index++)
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	87 30       	cpi	r24, 0x07	; 7
 10a:	91 05       	cpc	r25, r1
 10c:	99 f7       	brne	.-26     	; 0xf4 <find_index+0xc>
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
		if(arr[index] >= max_value){
				max_value = arr[index];
			}		
	}
	for(int index2 = 1; index2 <7; index2++){
		if(arr[index2] == max_value) return index2;
 112:	82 81       	ldd	r24, Z+2	; 0x02
 114:	93 81       	ldd	r25, Z+3	; 0x03
 116:	84 17       	cp	r24, r20
 118:	95 07       	cpc	r25, r21
 11a:	11 f4       	brne	.+4      	; 0x120 <find_index+0x38>
	
	}

}
 11c:	c9 01       	movw	r24, r18
 11e:	08 95       	ret
	{
		if(arr[index] >= max_value){
				max_value = arr[index];
			}		
	}
	for(int index2 = 1; index2 <7; index2++){
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	32 96       	adiw	r30, 0x02	; 2
 126:	27 30       	cpi	r18, 0x07	; 7
 128:	31 05       	cpc	r19, r1
 12a:	99 f7       	brne	.-26     	; 0x112 <find_index+0x2a>
		if(arr[index2] == max_value) return index2;
	
	}

}
 12c:	08 95       	ret

0000012e <main>:


int main()
{
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29

int light_strong=0;
int Dice_num =0;

DDRB = 0xff;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	87 bb       	out	0x17, r24	; 23
DDRE = 0xff;
 13c:	82 b9       	out	0x02, r24	; 2

////////////////////////////////////////////////////////////////////////
UART1_Init();
 13e:	0e 94 b4 01 	call	0x368	; 0x368 <UART1_Init>
UART1_PutString("Dice Connected");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 c9 01 	call	0x392	; 0x392 <UART1_PutString>

//TCCR0 |= (0<<WGM01) | (1<<WGM00); //위상 변경 pwm 모드 
//TCCR0 |= (1<<COM01) | (0<<COM00); // invert mode
//TCCR0 |= (0<<CS02) | (0<<CS01) | (1<<CS00); // prescale 128

TCCR1B |= (0<<WGM13) | (0<<WGM12);
 14a:	8e b5       	in	r24, 0x2e	; 46
 14c:	8e bd       	out	0x2e, r24	; 46
TCCR1A |= (0<<WGM11) | (1<<WGM10); //위상 변경 pwm 모드
 14e:	8f b5       	in	r24, 0x2f	; 47
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8f bd       	out	0x2f, r24	; 47
TCCR1B |= (0<<CS12) | (0<<CS11) | (1<<CS10);
 154:	8e b5       	in	r24, 0x2e	; 46
 156:	81 60       	ori	r24, 0x01	; 1
 158:	8e bd       	out	0x2e, r24	; 46
TCCR1A |= (1<<COM1A1) | (0<<COM1A0); // invert mode
 15a:	8f b5       	in	r24, 0x2f	; 47
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8f bd       	out	0x2f, r24	; 47
TCCR1A |= (1<<COM1B1) | (0<<COM1B0);
 160:	8f b5       	in	r24, 0x2f	; 47
 162:	80 62       	ori	r24, 0x20	; 32
 164:	8f bd       	out	0x2f, r24	; 47
TCCR1A |= (1<<COM1C1) | (0<<COM1C0);
 166:	8f b5       	in	r24, 0x2f	; 47
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	8f bd       	out	0x2f, r24	; 47

TCCR3B |= (0<<WGM33) | (0<<WGM32);
 16c:	80 91 8a 00 	lds	r24, 0x008A
 170:	80 93 8a 00 	sts	0x008A, r24
TCCR3A |= (0<<WGM31) | (1<<WGM30); //위상 변경 pwm 모드
 174:	80 91 8b 00 	lds	r24, 0x008B
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	80 93 8b 00 	sts	0x008B, r24
TCCR3B |= (0<<CS32) | (0<<CS31) | (1<<CS30); //prescale 8
 17e:	80 91 8a 00 	lds	r24, 0x008A
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 93 8a 00 	sts	0x008A, r24
TCCR3A |= (1<<COM3A1) | (0<<COM3A0); // invert mode
 188:	80 91 8b 00 	lds	r24, 0x008B
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	80 93 8b 00 	sts	0x008B, r24
TCCR3A |= (1<<COM3B1) | (0<<COM3B0); // invert mode
 192:	80 91 8b 00 	lds	r24, 0x008B
 196:	80 62       	ori	r24, 0x20	; 32
 198:	80 93 8b 00 	sts	0x008B, r24
TCCR3A |= (1<<COM3C1) | (0<<COM3C0);
 19c:	80 91 8b 00 	lds	r24, 0x008B
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	80 93 8b 00 	sts	0x008B, r24

TCNT0 = 0; 
 1a6:	12 be       	out	0x32, r1	; 50
TCNT1 = 0;
 1a8:	1d bc       	out	0x2d, r1	; 45
 1aa:	1c bc       	out	0x2c, r1	; 44
TCNT3 = 0;
 1ac:	10 92 89 00 	sts	0x0089, r1
 1b0:	10 92 88 00 	sts	0x0088, r1
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	00 e2       	ldi	r16, 0x20	; 32
 1ba:	1e e4       	ldi	r17, 0x4E	; 78
}

int GET_ADC(int muxx)
{
	ADMUX = muxx;
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(6<<ADPS0); //분주비 128
 1bc:	86 ec       	ldi	r24, 0xC6	; 198
 1be:	f8 2e       	mov	r15, r24


	while(1)
	{
	
	light_strong+= 2;
 1c0:	22 96       	adiw	r28, 0x02	; 2
	if( light_strong > 0x50 )
 1c2:	c1 35       	cpi	r28, 0x51	; 81
 1c4:	d1 05       	cpc	r29, r1
 1c6:	14 f0       	brlt	.+4      	; 0x1cc <main+0x9e>
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	ed e2       	ldi	r30, 0x2D	; 45
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 		
}

int GET_ADC(int muxx)
{
	ADMUX = muxx;
 1d2:	27 b9       	out	0x07, r18	; 7
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(6<<ADPS0); //분주비 128
 1d4:	f6 b8       	out	0x06, r15	; 6
 1d6:	c8 01       	movw	r24, r16
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0xaa>
	_delay_ms(5);
 	while(!(ADCSRA&(1<<ADIF)));
 1dc:	34 9b       	sbis	0x06, 4	; 6
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0xae>
	
	return ADC;
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	95 b1       	in	r25, 0x05	; 5
	{
		light_strong = 0x00;
	}

	for(int i= 1; i< 7; i++){
	adc_value[i] = GET_ADC(i);
 1e4:	81 93       	st	Z+, r24
 1e6:	91 93       	st	Z+, r25
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
	if( light_strong > 0x50 )
	{
		light_strong = 0x00;
	}

	for(int i= 1; i< 7; i++){
 1ea:	27 30       	cpi	r18, 0x07	; 7
 1ec:	91 f7       	brne	.-28     	; 0x1d2 <main+0xa4>
	adc_value[i] = GET_ADC(i);
	}

	switch(find_index(adc_value))	
 1ee:	8b e2       	ldi	r24, 0x2B	; 43
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 74 00 	call	0xe8	; 0xe8 <find_index>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 05       	cpc	r25, r1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <main+0xd0>
 1fc:	42 c0       	rjmp	.+132    	; 0x282 <main+0x154>
 1fe:	84 30       	cpi	r24, 0x04	; 4
 200:	91 05       	cpc	r25, r1
 202:	34 f4       	brge	.+12     	; 0x210 <main+0xe2>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 05       	cpc	r25, r1
 208:	71 f0       	breq	.+28     	; 0x226 <main+0xf8>
 20a:	02 97       	sbiw	r24, 0x02	; 2
 20c:	c9 f6       	brne	.-78     	; 0x1c0 <main+0x92>
 20e:	22 c0       	rjmp	.+68     	; 0x254 <main+0x126>
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	91 05       	cpc	r25, r1
 214:	09 f4       	brne	.+2      	; 0x218 <main+0xea>
 216:	63 c0       	rjmp	.+198    	; 0x2de <main+0x1b0>
 218:	85 30       	cpi	r24, 0x05	; 5
 21a:	91 05       	cpc	r25, r1
 21c:	0c f4       	brge	.+2      	; 0x220 <main+0xf2>
 21e:	48 c0       	rjmp	.+144    	; 0x2b0 <main+0x182>
 220:	06 97       	sbiw	r24, 0x06	; 6
 222:	71 f6       	brne	.-100    	; 0x1c0 <main+0x92>
 224:	73 c0       	rjmp	.+230    	; 0x30c <main+0x1de>
	{
		case 1:
		LED_1 = 0x00;
 226:	10 92 83 00 	sts	0x0083, r1
 22a:	10 92 82 00 	sts	0x0082, r1
		LED_2 = 0x00;
 22e:	1b bc       	out	0x2b, r1	; 43
 230:	1a bc       	out	0x2a, r1	; 42
		LED_3 = 0x00;
 232:	19 bc       	out	0x29, r1	; 41
 234:	18 bc       	out	0x28, r1	; 40
		LED_4 = 0x00;
 236:	10 92 79 00 	sts	0x0079, r1
 23a:	10 92 78 00 	sts	0x0078, r1
		LED_5 = 0x00;
 23e:	10 92 87 00 	sts	0x0087, r1
 242:	10 92 86 00 	sts	0x0086, r1
		LED_6 = light_strong;
 246:	d0 93 85 00 	sts	0x0085, r29
 24a:	c0 93 84 00 	sts	0x0084, r28
		UART1_PutString("1");
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	72 c0       	rjmp	.+228    	; 0x338 <main+0x20a>
		break;

		case 2:
		LED_1 = 0x00;
 254:	10 92 83 00 	sts	0x0083, r1
 258:	10 92 82 00 	sts	0x0082, r1
		LED_2 = 0x00;
 25c:	1b bc       	out	0x2b, r1	; 43
 25e:	1a bc       	out	0x2a, r1	; 42
		LED_3 = 0x00;
 260:	19 bc       	out	0x29, r1	; 41
 262:	18 bc       	out	0x28, r1	; 40
		LED_4 = light_strong;
 264:	d0 93 79 00 	sts	0x0079, r29
 268:	c0 93 78 00 	sts	0x0078, r28
		LED_5 = 0x00;
 26c:	10 92 87 00 	sts	0x0087, r1
 270:	10 92 86 00 	sts	0x0086, r1
		LED_6 = 0x00;
 274:	10 92 85 00 	sts	0x0085, r1
 278:	10 92 84 00 	sts	0x0084, r1
		UART1_PutString("2");
 27c:	81 e1       	ldi	r24, 0x11	; 17
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	5b c0       	rjmp	.+182    	; 0x338 <main+0x20a>
		break;
	
		case 3:
		LED_1 = 0x00;
 282:	10 92 83 00 	sts	0x0083, r1
 286:	10 92 82 00 	sts	0x0082, r1
		LED_2 = 0x00;
 28a:	1b bc       	out	0x2b, r1	; 43
 28c:	1a bc       	out	0x2a, r1	; 42
		LED_3 = 0x00;
 28e:	19 bc       	out	0x29, r1	; 41
 290:	18 bc       	out	0x28, r1	; 40
		LED_4 = 0x00;
 292:	10 92 79 00 	sts	0x0079, r1
 296:	10 92 78 00 	sts	0x0078, r1
		LED_5 = light_strong;
 29a:	d0 93 87 00 	sts	0x0087, r29
 29e:	c0 93 86 00 	sts	0x0086, r28
		LED_6 = 0x00;
 2a2:	10 92 85 00 	sts	0x0085, r1
 2a6:	10 92 84 00 	sts	0x0084, r1
		UART1_PutString("3");
 2aa:	83 e1       	ldi	r24, 0x13	; 19
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	44 c0       	rjmp	.+136    	; 0x338 <main+0x20a>
		break;

		case 4:
		LED_1 = 0x00;
 2b0:	10 92 83 00 	sts	0x0083, r1
 2b4:	10 92 82 00 	sts	0x0082, r1
		LED_2 = light_strong;
 2b8:	db bd       	out	0x2b, r29	; 43
 2ba:	ca bd       	out	0x2a, r28	; 42
		LED_3 = 0x00;
 2bc:	19 bc       	out	0x29, r1	; 41
 2be:	18 bc       	out	0x28, r1	; 40
		LED_4 = 0x00;
 2c0:	10 92 79 00 	sts	0x0079, r1
 2c4:	10 92 78 00 	sts	0x0078, r1
		LED_5 = 0x00;
 2c8:	10 92 87 00 	sts	0x0087, r1
 2cc:	10 92 86 00 	sts	0x0086, r1
		LED_6 = 0x00;
 2d0:	10 92 85 00 	sts	0x0085, r1
 2d4:	10 92 84 00 	sts	0x0084, r1
		UART1_PutString("4");
 2d8:	85 e1       	ldi	r24, 0x15	; 21
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	2d c0       	rjmp	.+90     	; 0x338 <main+0x20a>
		break;

		case 5:
		LED_1 = 0x00;
 2de:	10 92 83 00 	sts	0x0083, r1
 2e2:	10 92 82 00 	sts	0x0082, r1
		LED_2 = 0x00;
 2e6:	1b bc       	out	0x2b, r1	; 43
 2e8:	1a bc       	out	0x2a, r1	; 42
		LED_3 = light_strong;
 2ea:	d9 bd       	out	0x29, r29	; 41
 2ec:	c8 bd       	out	0x28, r28	; 40
		LED_4 = 0x00;
 2ee:	10 92 79 00 	sts	0x0079, r1
 2f2:	10 92 78 00 	sts	0x0078, r1
		LED_5 = 0x00;
 2f6:	10 92 87 00 	sts	0x0087, r1
 2fa:	10 92 86 00 	sts	0x0086, r1
		LED_6 = 0x00;
 2fe:	10 92 85 00 	sts	0x0085, r1
 302:	10 92 84 00 	sts	0x0084, r1
		UART1_PutString("5");
 306:	87 e1       	ldi	r24, 0x17	; 23
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	16 c0       	rjmp	.+44     	; 0x338 <main+0x20a>
		break;
	
		case 6:
		LED_1 = light_strong;
 30c:	d0 93 83 00 	sts	0x0083, r29
 310:	c0 93 82 00 	sts	0x0082, r28
		LED_2 = 0x00;
 314:	1b bc       	out	0x2b, r1	; 43
 316:	1a bc       	out	0x2a, r1	; 42
		LED_3 = 0x00;
 318:	19 bc       	out	0x29, r1	; 41
 31a:	18 bc       	out	0x28, r1	; 40
		LED_4 = 0x00;
 31c:	10 92 79 00 	sts	0x0079, r1
 320:	10 92 78 00 	sts	0x0078, r1
		LED_5 = 0x00;
 324:	10 92 87 00 	sts	0x0087, r1
 328:	10 92 86 00 	sts	0x0086, r1
		LED_6 = 0x00;
 32c:	10 92 85 00 	sts	0x0085, r1
 330:	10 92 84 00 	sts	0x0084, r1
		UART1_PutString("6");
 334:	89 e1       	ldi	r24, 0x19	; 25
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 c9 01 	call	0x392	; 0x392 <UART1_PutString>
 33c:	41 cf       	rjmp	.-382    	; 0x1c0 <main+0x92>

0000033e <receive_data>:
int test[] = {0, 2, 6, 5, 4, 1, 7 };
int adc_value[] = {0, };

void receive_data()
{
		switch(U1_GetByte()){
 33e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <U1_GetByte>
		case 'f':
			break;
		}

 		
}
 342:	08 95       	ret

00000344 <__vector_30>:
#include "uart.h"
#define u1_IsReceiveData()		((UCSR1A & 0x80))
#define u1_RxData()		 					(UDR1)
#define u1_WaitForReceive()		while(!(UCSR1A & 0x80))

ISR(USART1_RX_vect) {
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
	//수신 데이터를 UDR0레지스터에서 RxBuffer 변수에 저장 
	RxBuffer = UDR0;
 350:	8c b1       	in	r24, 0x0c	; 12
 352:	80 93 2e 01 	sts	0x012E, r24
	//수신 상태를 나타내는 플래그 변수를 1로 설정 
	RxFlag = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 2d 01 	sts	0x012D, r24
}
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <UART1_Init>:

//UART1 초기화 함수
void UART1_Init(){
//	unsigned long temp;

	UCSR1B = (1<<TXEN) | (1<<RXEN);
 368:	ea e9       	ldi	r30, 0x9A	; 154
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	88 e1       	ldi	r24, 0x18	; 24
 36e:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE); //수신완료 인터럽트 활성화 
 370:	80 81       	ld	r24, Z
 372:	80 68       	ori	r24, 0x80	; 128
 374:	80 83       	st	Z, r24
	UBRR1H = 0x00;
 376:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 8;
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	80 93 99 00 	sts	0x0099, r24
}
 380:	08 95       	ret

00000382 <UART1_PutChar>:
//1바이트의 데이터를 송신하는 함수 
void UART1_PutChar(unsigned int byData){
 382:	98 2f       	mov	r25, r24
	while(!(UCSR1A & (1<<UDRE))); //송신 버퍼가 빌 때까지 대기
 384:	80 91 9b 00 	lds	r24, 0x009B
 388:	85 ff       	sbrs	r24, 5
 38a:	fc cf       	rjmp	.-8      	; 0x384 <UART1_PutChar+0x2>
	UDR1 = byData; //송신 버퍼에 데이터 저장 
 38c:	90 93 9c 00 	sts	0x009C, r25
}
 390:	08 95       	ret

00000392 <UART1_PutString>:

void UART1_PutString(char *Str) {
 392:	fc 01       	movw	r30, r24
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <UART1_PutString+0x12>
	UBRR1H = 0x00;
	UBRR1L = 8;
}
//1바이트의 데이터를 송신하는 함수 
void UART1_PutChar(unsigned int byData){
	while(!(UCSR1A & (1<<UDRE))); //송신 버퍼가 빌 때까지 대기
 396:	80 91 9b 00 	lds	r24, 0x009B
 39a:	85 ff       	sbrs	r24, 5
 39c:	fc cf       	rjmp	.-8      	; 0x396 <UART1_PutString+0x4>
	UDR1 = byData; //송신 버퍼에 데이터 저장 
}

void UART1_PutString(char *Str) {
	while(*Str)
		UART1_PutChar(*Str++); //1바이트의 데이터를 송신 
 39e:	31 96       	adiw	r30, 0x01	; 1
	UBRR1L = 8;
}
//1바이트의 데이터를 송신하는 함수 
void UART1_PutChar(unsigned int byData){
	while(!(UCSR1A & (1<<UDRE))); //송신 버퍼가 빌 때까지 대기
	UDR1 = byData; //송신 버퍼에 데이터 저장 
 3a0:	90 93 9c 00 	sts	0x009C, r25
}

void UART1_PutString(char *Str) {
	while(*Str)
 3a4:	90 81       	ld	r25, Z
 3a6:	99 23       	and	r25, r25
 3a8:	b1 f7       	brne	.-20     	; 0x396 <UART1_PutString+0x4>
		UART1_PutChar(*Str++); //1바이트의 데이터를 송신 
}
 3aa:	08 95       	ret

000003ac <U1_IsGetByte>:


unsigned char U1_IsGetByte(void)
{
	return u1_IsReceiveData();
 3ac:	80 91 9b 00 	lds	r24, 0x009B
}
 3b0:	80 78       	andi	r24, 0x80	; 128
 3b2:	08 95       	ret

000003b4 <U1_GetByte>:

unsigned char U1_GetByte(void)
{
	u1_WaitForReceive();
 3b4:	80 91 9b 00 	lds	r24, 0x009B
 3b8:	87 ff       	sbrs	r24, 7
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <U1_GetByte>
	
	return u1_RxData();
 3bc:	80 91 9c 00 	lds	r24, 0x009C
}
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
